#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
from numpy import random
import math


# <h2> Ejercicio 1) </h2> 
# 
# <h3> Parte 2 </h3> 
#         Generar una muestra i.i.d X1, X2, ...., Xn de experimentos geometricos de parametro 1/2 y graficar
#         la evolucion del promedio X(techito) en funcion de n.
#         Verificar la ley fuerte de los grandes numeros

# Genero la muestra.

# In[2]:


n = 5000 # n lo suficientemente grande para poder verificar la ley fuerte de los grandes numeros.
p = 0.5

muestra = random.geometric(p=p, size = n) # Arreglo con el resultado de n distribuciones geometricas.
promedio = [] # Promedio de cada valor de n.

for i in range(1, len(muestra) + 1):
    primeros_n = muestra[:i] # Uso "Slices" de arreglos para tener los valores de la posicion 0 a la posicion i de mi muestra.
    suma = sum(primeros_n) # Sumo los valores de "primeros_n".
    largo = len(primeros_n) # Cantidad de n.
    promedio_n = suma/largo
    promedio.append(promedio_n) # Ingreso el primedio a el arreglo para asi evaluar su evolucion.


    


# Grafico la evolucion del promedio en funcion de n.

# In[3]:



esperanzaDistribucion = 1/p
print(esperanzaDistribucion)

linea = [esperanzaDistribucion for _ in range(0,n)]
plt.plot(linea, linestyle='solid')
plt.plot(promedio)
plt.show()


# In[4]:


print(f"Se puede notar que a mayor sea el n, mas se aproxima el promedio a la linea azul que esta prefijada en el valor {esperanzaDistribucion}, el cual es la esperanza de la distribucion geometrica (1/p) con parametro 0.5.")


# <h3> Parte 3 </h3>
# 
# La muestra dada es el resultado de 100 variables aleatorias con distribucion geometrica.
# Con esos valores realizo el promedio, sumando todos los valores y dividiendo por la cantidad de resultados.
# Por la ley fuerte de los grandes numeros tenemos que el promedio va a tender a la esperanza de una de las 100 variables aleatorias (todas las variables tienen la misma distrubucion y por lo tanto misma esperanza).
# 
# Por tener una distribucion geometrica tenemos que la esperanza es 1/p.
# 
# Entonces si el promedio tiende a E(X), tenemos que:
# XProm = E(X) ==> XProm = 1/p ==> p = 1 / XProm
# 
# Siendo p la probabilidad de que en el dado salga un 6.

# In[5]:


muestraEjercicio = [6,19,1,4,3,6,9,9,3,9,34,7,28,2,5,1,15,11,9,3,11,41,14,10,4,2,4,8,3,1,12,4,3,2,15,1,3,1,16,19,12,29,8,9,1,7,9,7,2,8,2,11,2,7,5,8,13,13,6,6,2,5,2,11,3,2,6,17,3,23,7,12,11,7,23,36,18,21,5,3,14,15,2,3,5,2,15,9,4,3,4,1,8,5,1,2,1,11,5,8]
promedio = sum(muestraEjercicio) # Sumo todos los valores de muestraEjercicio

promedio = promedio / 100
probabilidad = 1/promedio

# Por la ley de los grandes numeros tenemos que el promedio de una muestra de variables 
# aleatorias es igual a la esperanza de las variables aleatorias.

print(f"La probabilidad de obtener 6 en el dado es: {probabilidad}")


# <h1>________________________________________________________</h1>
# <h1>________________________________________________________</h1>

# <h1> Ejercicio 2</h1>
# <h3> Parte 4 </h3>
# 
# A mayor sea el n (cantidad de jugadas y por lo tanto n ganancias acumuladas), menos es la ganancia total de la persona ya que la esperanza individual de cada jugada (E(X)) es negativa y multuiplicada por un n cada vez mas grande, el resultado va a tender a menos infinito.
# 
# 

# <h3> Parte 5 </h3>

# In[6]:



n = 100000    # n lo suficientemente grande.
muestra = list(random.choice([1,-1], p=[(18/37),(19/37)], size=n)) # Genero mi distribucion con P(X=1) = 18/37 y P(X=-1) = 19/37, de tamano n.
esperanza = -1/37 # Esperanza calculada en ejercicio anterior.
arregloEsperanzas = []

for i in range(1, n+1):
    arregloEsperanzas.append(i*esperanza)


print(f"A mano podemos ver que cuanto mas grande el n, menor es la esperanza de Y: \n {esperanza*10} \n {esperanza*100} \n {esperanza*1000} \n")
print(f"Simulandolo se puede ver que tiende a infinito: ")    
plt.plot(arregloEsperanzas)
plt.show()


# <p>Se puede ver que a mayor es el n (eje horizontal) menor es el valor de la esperanza (eje vertical).</p>
# <p>E(Y)→−∞ a medida que n→+∞.</p>

# <h3> Parte 6 </h3>
# 
# Si E(X) es negativa, el valor esperado de la ganancia para cada jugada es negativa y por lo tanto, son positivas las ganancias del casino.
# 
# Si la esperanza de las ganancias de un jugador son negativas, significa que la esperanza de las ganancias del casino son positivas. Puede haber casos especificos donde un jugador tenga una buena ganancia, pero tendiendo a infinito, el casino va a ganar tarde o temprano.

# <h1> Ejercicio 3 </h1>
# <h3> Parte 3 </h3>
# 

# In[7]:


# Muestra de tamaño N de una X ~ Bin(n=100, p=0.5)
tiradas = 100
p = 0.5
ex = tiradas * p
varx = tiradas * p * (1 - p)

probabilidad = 0

# Por ser una Binomial, tenemos que la probabilidad exacta es:
# P(X = j) = C(n, j) * (1 - p)**(n-j)
# Para calcular las combinaciones uso math.comb y math.pow para las potencias, math es una biblioteca incluida en Python.

def probBinomial(n, j, p):
    return math.comb(n,j) * math.pow(p, j) * math.pow((1 - p), (n-j))


for i in range(40, 51):
    print(f"P(X = {i}) = {probBinomial(tiradas, i, p)}")
    probabilidad += probBinomial(tiradas, i, p)
    
print("Sumando las probabilidades se obtiene que: ")
print(f"P(40 <= X <= 50) = {probabilidad}")

print("\nY usando el teorema central del limite, podemos aproximar la probabilidad con una distribucion normal de parametros 0 y 1 obteniendo el valor: ")

aproximacionProbabilidad = norm.cdf(0) - norm.cdf(-2)
print(aproximacionProbabilidad)

print(f"\nEl error obtenido por calcular las probabilidades con una aproximacion es de {abs(aproximacionProbabilidad-probabilidad)}")


# In[ ]:




